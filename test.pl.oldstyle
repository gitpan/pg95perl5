#-------------------------------------------------------
#
# $Id: test.pl.oldstyle,v 2.1 1996/11/24 09:22:01 mergl Exp $
#
#-------------------------------------------------------

# Before `make install' is performed this script should be runnable with
# `make test'. After `make install' it should work as `perl test.pl'

######################### We start with some black magic to print on failure.

BEGIN { $| = 1; print "1..55\n"; }
END {print "not ok 1\n" unless $loaded;}
use Pg;
$loaded = 1;
print "ok 1\n";

######################### End of black magic.

$dbmain    = 'template1';
$dbname    = 'pgperltest';
$trace     = '/tmp/pgtrace.out';
$cnt       = 2;
$DEBUG     = 0; # set this to 1 for traces

######################### the following functions will be tested

#	PQsetdb()
#	PQfinish()
#	PQstatus()
#	PQerrorMessage()
#	PQtrace()
#	PQuntrace()
#	PQexec()
#	PQgetline()
#	PQendcopy()
#	PQputline()
#	PQresultStatus()
#	PQntuples()
#	PQnfields()
#	PQcmdStatus()
#	PQoidStatus()
#	PQgetvalue()
#	PQclear()
#	PQprint()
#	PQnotifies()
#	PQlo_open()
#	PQlo_close()
#	PQlo_read()
#	PQlo_write()
#	PQlo_creat()
#	PQlo_unlink()

######################### the following functions will not be tested

#	PQreset()
#	PQdb()
#	PQhost()
#	PQoptions()
#	PQport()
#	PQtty()
#	PQfname()
#	PQfnumber()
#	PQftype()
#	PQfsize()
#	PQgetlength()
#	PQgetisnull()
#	PQprintTuples()
#	PQlo_lseek()
#	PQlo_tell()
#	PQlo_import()
#	PQlo_export()

######################### handles error condition for PQsetdb

$SIG{PIPE} = sub { print "broken pipe\n" };

######################### create and connect to test database

$conn = PQsetdb('', '', '', '', $dbmain);
cmp_eq(PGRES_CONNECTION_OK, PQstatus($conn));

$result = PQexec($conn, "drop database $dbname");
PQclear($result);

$result = PQexec($conn, "create database $dbname");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
PQclear($result);

PQfinish($conn);

$conn = PQsetdb('', '', '', '', $dbname);
cmp_eq(PGRES_CONNECTION_OK, PQstatus($conn));

######################### debug, PQtrace

if ($DEBUG) {
    open(TRACE, ">$trace") || die "can not open $trace: $!";
    PQtrace($conn, TRACE);
}

######################### create and insert into table

$result = PQexec($conn, "create table person (name char16, age int4, location point)");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
cmp_eq("CREATE", PQcmdStatus($result));
PQclear($result);

for ($i=50; $i <= 90; $i = $i + 10) {
    $result = PQexec($conn, "insert into person values (\'fred\', $i, \'($i,10)\'::point)");
    cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
    cmp_ne(0, PQoidStatus($result));
    PQclear($result);
}

######################### copy to stdout, PQgetline

$result = PQexec($conn, "copy person to stdout");
cmp_eq(PGRES_COPY_OUT, PQresultStatus($result));
PQclear($result);

$i = 50;
while (-1 != $ret) {
    $ret = PQgetline($conn, $string, 256);
    last if $string eq "\\.";
    cmp_eq("fred	$i	($i,10)", $string);
    $i += 10;
}

cmp_eq(0, PQendcopy($conn));

######################### delete and copy from stdin, PQputline

$result = PQexec($conn, "begin");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
PQclear($result);

$result = PQexec($conn, "delete from person");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
cmp_eq("DELETE", PQcmdStatus($result));
PQclear($result);

$result = PQexec($conn, "copy person from stdin");
cmp_eq(PGRES_COPY_IN, PQresultStatus($result));
PQclear($result);

for ($i=50; $i <= 90; $i = $i + 10) {
    # watch the tabs and do not forget the newlines
    PQputline($conn, "fred	$i	($i,10)\n");
}
PQputline($conn, "\\.\n");

cmp_eq(0, PQendcopy($conn));

$result = PQexec($conn, "end");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
PQclear($result);

######################### select from person, PQgetvalue

$result = PQexec($conn, "select * from person");
cmp_eq(PGRES_TUPLES_OK, PQresultStatus($result));
$i = 50;
for ($k=0; $k < PQntuples($result); $k++) {
    $string = "";
    for ($l=0; $l < PQnfields($result); $l++) {
        $string .= PQgetvalue($result, $k, $l) . " ";
    }
    cmp_eq("fred $i ($i,10) ", $string);
    $i += 10;
}
PQclear($result);

######################### PQnotifies

if (!defined($pid = fork)) {
    die "can not fork: $!";
} elsif (! $pid) {
    # i'm the child
    sleep 2;
    $conn = PQsetdb('', '', '', '', $dbname);
    $result = PQexec($conn, "notify person");
    PQclear($result);
    PQfinish($conn);
    exit;
}

$result = PQexec($conn, "listen person");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
cmp_eq("LISTEN", PQcmdStatus($result));
PQclear($result);

while (1) {
    $result = PQexec($conn, " ");
    ($table, $pid) = PQnotifies($conn);
    PQclear($result);
    last if $pid;
}

cmp_eq("person", $table);

######################### PQprint

$result = PQexec($conn, "select location from person where age = 70");
cmp_eq(PGRES_TUPLES_OK, PQresultStatus($result));
open(PRINT, "| read IN; read IN; if [ \"\$IN\" = \"myLocation (70,10)\" ]; then echo \"ok $cnt\"; else echo \"not ok $cnt: PQprint\"; fi ") || die "can not fork: $|";
$cnt ++;
PQprint(PRINT, $result, 0, 0, 0, 0, 1, 0, " ", "", "", "myLocation");
PQclear($result);
close(PRINT) || die "bad PRINT: $!";

######################### PQlo_creat, PQlo_open, PQlo_write

$cwd = `pwd`;
chop $cwd;
$filename = "$cwd/Changes";
open(LO, $filename) || die "can not open $filename: $!";

$result = PQexec($conn, "begin");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
PQclear($result);

$lobjId = PQlo_creat($conn, PGRES_INV_READ|PGRES_INV_WRITE);
cmp_ne(0, $lobjId);

$lobj_fd = PQlo_open($conn, $lobjId, PGRES_INV_WRITE);
cmp_ne(-1, $lobj_fd);

$i = 0;
while (($nbytes = read(LO, $buf, 1024)) > 0) {
    $cmp_ary[$i] = $buf;
    cmp_eq($nbytes, PQlo_write($conn, $lobj_fd, $buf, $nbytes));
    $i++;
}

close(LO)|| die "bad LO: $!";
cmp_eq(0, PQlo_close($conn, $lobj_fd));

$result = PQexec($conn, "end");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
PQclear($result);

######################### PQlo_read, PQlo_unlink

$result = PQexec($conn, "begin");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
PQclear($result);

$lobj_fd = PQlo_open($conn, $lobjId, PGRES_INV_READ);
cmp_ne(-1, $lobj_fd);

$i = 0;
while (($nbytes = PQlo_read($conn, $lobj_fd, $buf, 1024)) > 0) {
    cmp_eq($cmp_ary[$i], $buf);
    $i++;
}

cmp_eq(0, PQlo_close($conn, $lobj_fd));

cmp_ne(-1, PQlo_unlink($conn, $lobjId));

$result = PQexec($conn, "end");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
PQclear($result);

######################### debug, PQuntrace

if ($DEBUG) {
    close(TRACE) || die "bad TRACE: $!";
    PQuntrace($conn);
}

######################### disconnect and drop test database

PQfinish($conn);

$conn = PQsetdb('', '', '', '', $dbmain);
cmp_eq(PGRES_CONNECTION_OK, PQstatus($conn));

$result = PQexec($conn, "drop database $dbname");
cmp_eq(PGRES_COMMAND_OK, PQresultStatus($result));
cmp_eq("DELETE", PQcmdStatus($result));
PQclear($result);

PQfinish($conn);

######################### hopefully

print "all tests passed.\n" if 56 == $cnt;

######################### utility functions

sub cmp_eq {

    my $cmp = shift;
    my $ret = shift;
    my $msg;

    if ("$cmp" eq "$ret") {
	print "ok $cnt\n";
    } else {
        $msg = PQerrorMessage($conn);
	die "not ok $cnt: $cmp, $ret\n$msg\n";
    }
    $cnt++;
}

sub cmp_ne {

    my $cmp = shift;
    my $ret = shift;
    my $msg;

    if ("$cmp" ne "$ret") {
	print "ok $cnt\n";
    } else {
        $msg = PQerrorMessage($conn);
	die "not ok $cnt: $cmp, $ret\n$msg\n";
    }
    $cnt++;
}

######################### EOF
